{"version":3,"file":"VoiceRecorderImpl.js","sourceRoot":"","sources":["../../src/VoiceRecorderImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import getBlobDuration from 'get-blob-duration';\r\n\r\nimport type { Base64String, CurrentRecordingStatus, GenericResponse, RecordingData } from './definitions';\r\nimport {\r\n  alreadyRecordingError,\r\n  couldNotQueryPermissionStatusError,\r\n  deviceCannotVoiceRecordError,\r\n  emptyRecordingError,\r\n  failedToFetchRecordingError,\r\n  failedToRecordError,\r\n  failureResponse,\r\n  missingPermissionError,\r\n  recordingHasNotStartedError,\r\n  successResponse,\r\n} from './predefined-web-responses';\r\n\r\n// these mime types will be checked one by one in order until one of them is found to be supported by the current browser\r\nconst possibleMimeTypes = ['audio/wav', 'audio/webm;codecs=opus', 'audio/mp4', 'audio/webm', 'audio/aac', 'audio/ogg;codecs=opus'];\r\nconst neverResolvingPromise = (): Promise<any> => new Promise(() => undefined);\r\n\r\nexport class VoiceRecorderImpl {\r\n  private mediaRecorder: MediaRecorder | null = null;\r\n  private chunks: any[] = [];\r\n  private pendingResult: Promise<RecordingData> = neverResolvingPromise();\r\n\r\n  public static async canDeviceVoiceRecord(): Promise<GenericResponse> {\r\n    if (navigator?.mediaDevices?.getUserMedia == null || VoiceRecorderImpl.getSupportedMimeType() == null) {\r\n      return failureResponse();\r\n    } else {\r\n      return successResponse();\r\n    }\r\n  }\r\n\r\n  public async startRecording(): Promise<GenericResponse> {\r\n    if (this.mediaRecorder != null) {\r\n      throw alreadyRecordingError();\r\n    }\r\n    const deviceCanRecord = await VoiceRecorderImpl.canDeviceVoiceRecord();\r\n    if (!deviceCanRecord.value) {\r\n      throw deviceCannotVoiceRecordError();\r\n    }\r\n    const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => successResponse());\r\n    if (!havingPermission.value) {\r\n      throw missingPermissionError();\r\n    }\r\n\r\n    return navigator.mediaDevices\r\n      .getUserMedia({ audio: true })\r\n      .then(this.onSuccessfullyStartedRecording.bind(this))\r\n      .catch(this.onFailedToStartRecording.bind(this));\r\n  }\r\n\r\n  public async stopRecording(): Promise<RecordingData> {\r\n    if (this.mediaRecorder == null) {\r\n      throw recordingHasNotStartedError();\r\n    }\r\n    try {\r\n      this.mediaRecorder.stop();\r\n      this.mediaRecorder.stream.getTracks().forEach((track) => track.stop());\r\n      return this.pendingResult;\r\n    } catch (ignore) {\r\n      throw failedToFetchRecordingError();\r\n    } finally {\r\n      this.prepareInstanceForNextOperation();\r\n    }\r\n  }\r\n\r\n  public static async hasAudioRecordingPermission(): Promise<GenericResponse> {\r\n    return navigator.permissions\r\n      .query({ name: 'microphone' as any })\r\n      .then((result) => ({ value: result.state === 'granted' }))\r\n      .catch(() => {\r\n        throw couldNotQueryPermissionStatusError();\r\n      });\r\n  }\r\n\r\n  public static async requestAudioRecordingPermission(): Promise<GenericResponse> {\r\n    const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => failureResponse());\r\n    if (havingPermission.value) {\r\n      return successResponse();\r\n    }\r\n\r\n    return navigator.mediaDevices\r\n      .getUserMedia({ audio: true })\r\n      .then(() => successResponse())\r\n      .catch(() => failureResponse());\r\n  }\r\n\r\n  public pauseRecording(): Promise<GenericResponse> {\r\n    if (this.mediaRecorder == null) {\r\n      throw recordingHasNotStartedError();\r\n    } else if (this.mediaRecorder.state === 'recording') {\r\n      this.mediaRecorder.pause();\r\n      return Promise.resolve(successResponse());\r\n    } else {\r\n      return Promise.resolve(failureResponse());\r\n    }\r\n  }\r\n\r\n  public resumeRecording(): Promise<GenericResponse> {\r\n    if (this.mediaRecorder == null) {\r\n      throw recordingHasNotStartedError();\r\n    } else if (this.mediaRecorder.state === 'paused') {\r\n      this.mediaRecorder.resume();\r\n      return Promise.resolve(successResponse());\r\n    } else {\r\n      return Promise.resolve(failureResponse());\r\n    }\r\n  }\r\n\r\n  public getCurrentStatus(): Promise<CurrentRecordingStatus> {\r\n    if (this.mediaRecorder == null) {\r\n      return Promise.resolve({ status: 'NONE' });\r\n    } else if (this.mediaRecorder.state === 'recording') {\r\n      return Promise.resolve({ status: 'RECORDING' });\r\n    } else if (this.mediaRecorder.state === 'paused') {\r\n      return Promise.resolve({ status: 'PAUSED' });\r\n    } else {\r\n      return Promise.resolve({ status: 'NONE' });\r\n    }\r\n  }\r\n\r\n  public static getSupportedMimeType(): string | null {\r\n    if (MediaRecorder?.isTypeSupported == null) return null;\r\n    const foundSupportedType = possibleMimeTypes.find((type) => MediaRecorder.isTypeSupported(type));\r\n    return foundSupportedType ?? null;\r\n  }\r\n\r\n  private onSuccessfullyStartedRecording(stream: MediaStream): GenericResponse {\r\n    this.pendingResult = new Promise((resolve, reject) => {\r\n      this.mediaRecorder = new MediaRecorder(stream);\r\n      this.mediaRecorder.onerror = () => {\r\n        this.prepareInstanceForNextOperation();\r\n        reject(failedToRecordError());\r\n      };\r\n      this.mediaRecorder.onstop = async () => {\r\n        const mimeType = VoiceRecorderImpl.getSupportedMimeType();\r\n        if (mimeType == null) {\r\n          this.prepareInstanceForNextOperation();\r\n          reject(failedToFetchRecordingError());\r\n          return;\r\n        }\r\n        const blobVoiceRecording = new Blob(this.chunks, { type: mimeType });\r\n        if (blobVoiceRecording.size <= 0) {\r\n          this.prepareInstanceForNextOperation();\r\n          reject(emptyRecordingError());\r\n          return;\r\n        }\r\n        const recordDataBase64 = await VoiceRecorderImpl.blobToBase64(blobVoiceRecording);\r\n        const recordingDuration = await getBlobDuration(blobVoiceRecording);\r\n        this.prepareInstanceForNextOperation();\r\n        resolve({ value: { recordDataBase64, mimeType, msDuration: recordingDuration * 1000 } });\r\n      };\r\n      this.mediaRecorder.ondataavailable = (event: any) => this.chunks.push(event.data);\r\n      this.mediaRecorder.start();\r\n    });\r\n    return successResponse();\r\n  }\r\n\r\n  private onFailedToStartRecording(): GenericResponse {\r\n    this.prepareInstanceForNextOperation();\r\n    throw failedToRecordError();\r\n  }\r\n\r\n  private static blobToBase64(blob: Blob): Promise<Base64String> {\r\n    return new Promise((resolve) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const recordingResult = String(reader.result);\r\n        const splitResult = recordingResult.split('base64,');\r\n        const toResolve = splitResult.length > 1 ? splitResult[1] : recordingResult;\r\n        resolve(toResolve.trim());\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  }\r\n\r\n  private prepareInstanceForNextOperation(): void {\r\n    if (this.mediaRecorder != null && this.mediaRecorder.state === 'recording') {\r\n      try {\r\n        this.mediaRecorder.stop();\r\n      } catch (ignore) {\r\n        // Do nothing\r\n      }\r\n    }\r\n    this.pendingResult = neverResolvingPromise();\r\n    this.mediaRecorder = null;\r\n    this.chunks = [];\r\n  }\r\n}\r\n"]}